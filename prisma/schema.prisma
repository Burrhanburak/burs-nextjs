// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String        @id @default(cuid())
  tcKimlikNo            String        @unique
  firstName             String
  lastName              String
  email                 String        @unique
  password              String
  birthDate             DateTime?
  profession            String?
  mobilePhone           String
  university            String?
  department            String?
  grade                 String?
  otherScholarship      Boolean       @default(false)
  otherScholarshipDetails String?
  nationality           String?
  isActive              Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  scholarshipApplications ScholarshipApplication[]
  documents             Document[]
  name                  String?
  emailVerified         DateTime?
  image                 String?
  verificationCode      String?       // Added for email verification
  role                  UserRole      @default(APPLICANT)
  accounts              Account[]
  sessions              Session[]
  notifications         Notification[]
}

model ScholarshipApplication {
  id                    String        @id @default(cuid())
  userId                String
  user                  User          @relation(fields: [userId], references: [id])
  applicationId         String
  application          Application    @relation(fields: [applicationId], references: [id])
  status                ApplicationStatus @default(PENDING)
  applicationDate       DateTime      @default(now())
  preApprovalDate       DateTime?
  preRejectionDate      DateTime?
  preRejectionReason    String?
  documentSubmissionDate DateTime?
  documentApprovalDate  DateTime?
  documentRejectionDate DateTime?
  documentRejectionReason String?
  interviewDate         DateTime?
  interviewResult       String?       // passed, failed
  interviewNotes        String?
  finalApprovalDate     DateTime?
  finalRejectionDate    DateTime?
  finalRejectionReason  String?
  scholarshipPeriod     String?       // e.g. "2023-2024"
  amount                Float?
  notes                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  documents             Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  id                    String                @id @default(cuid())
  title                 String
  description           String
  requirements          String
  deadline              DateTime
  scholarshipApplications ScholarshipApplication[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model Document {
  id                      String                @id @default(cuid())
  url                     String
  type                    String
  userId                  String
  user                    User                  @relation(fields: [userId], references: [id])
  scholarshipApplicationId String?
  scholarshipApplication   ScholarshipApplication? @relation(fields: [scholarshipApplicationId], references: [id])
  status                  DocumentStatus        @default(PENDING)
  rejectionReason         String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

model Notification {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  message           String
  type              NotificationType
  read              Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Admin {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  role                  AdminRole     @default(ADMIN)
  isActive              Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model RequiredDocument {
  id                    String        @id @default(cuid())
  type                  String        @unique // e.g. "transcript", "id_card", "income_statement"
  name                  String
  description           String
  isRequired            Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

enum UserRole {
  ADMIN
  APPLICANT
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum ApplicationStatus {
  PENDING
  PRE_APPROVED
  PRE_REJECTED
  DOCUMENT_REQUIRED
  DOCUMENTS_SUBMITTED
  DOCUMENTS_APPROVED
  DOCUMENTS_REJECTED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  FINAL_APPROVED
  FINAL_REJECTED
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  APPLICATION_STATUS
  DOCUMENT_STATUS
  INTERVIEW_INVITATION
  GENERAL
}

